[
    FreeVar {
        var: FreeVar(
            Atom('phash' type=inline),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Callee,
            ),
            Callee(
                Expr,
            ),
            Expr(
                Ident,
            ),
        ],
        span: Span {
            lo: BytePos(
                143,
            ),
            hi: BytePos(
                148,
            ),
            ctxt: #1,
        },
        in_try: false,
    },
    Member {
        obj: Unknown(
            None,
            "unsupported expression",
        ),
        prop: Constant(
            Str(
                Word(
                    Atom('baseHash' type=dynamic),
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    0,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                149,
            ),
            hi: BytePos(
                162,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Member {
        obj: Variable(
            (
                Atom('stylis' type=inline),
                #3,
            ),
        ),
        prop: Constant(
            Str(
                Word(
                    Atom('hash' type=inline),
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
            CallExpr(
                Args(
                    1,
                ),
            ),
            ExprOrSpread(
                Expr,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                164,
            ),
            hi: BytePos(
                175,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Call {
        func: FreeVar(
            Atom('phash' type=inline),
        ),
        args: [
            Value(
                Member(
                    3,
                    Unknown(
                        None,
                        "unsupported expression",
                    ),
                    Constant(
                        Str(
                            Word(
                                Atom('baseHash' type=dynamic),
                            ),
                        ),
                    ),
                ),
            ),
            Value(
                Member(
                    3,
                    Variable(
                        (
                            Atom('stylis' type=inline),
                            #3,
                        ),
                    ),
                    Constant(
                        Str(
                            Word(
                                Atom('hash' type=inline),
                            ),
                        ),
                    ),
                ),
            ),
        ],
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Call,
            ),
        ],
        span: Span {
            lo: BytePos(
                143,
            ),
            hi: BytePos(
                176,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Member {
        obj: Member(
            3,
            Unknown(
                None,
                "unsupported expression",
            ),
            Constant(
                Str(
                    Word(
                        Atom('rules' type=inline),
                    ),
                ),
            ),
        ),
        prop: Constant(
            Str(
                Word(
                    Atom('length' type=static),
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Test,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Right,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                221,
            ),
            hi: BytePos(
                238,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Member {
        obj: Unknown(
            None,
            "unsupported expression",
        ),
        prop: Constant(
            Str(
                Word(
                    Atom('rules' type=inline),
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Test,
            ),
            Expr(
                Bin,
            ),
            BinExpr(
                Right,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                221,
            ),
            hi: BytePos(
                231,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Member {
        obj: Member(
            3,
            Unknown(
                None,
                "unsupported expression",
            ),
            Constant(
                Str(
                    Word(
                        Atom('rules' type=inline),
                    ),
                ),
            ),
        ),
        prop: Variable(
            (
                Atom('i' type=static),
                #4,
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Body,
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                270,
            ),
            hi: BytePos(
                283,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Member {
        obj: Unknown(
            None,
            "unsupported expression",
        ),
        prop: Constant(
            Str(
                Word(
                    Atom('rules' type=inline),
                ),
            ),
        ),
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Body,
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    0,
                ),
            ),
            Stmt(
                Decl,
            ),
            Decl(
                Var,
            ),
            VarDecl(
                Decls(
                    0,
                ),
            ),
            VarDeclarator(
                Init,
            ),
            Expr(
                Member,
            ),
            MemberExpr(
                Obj,
            ),
            Expr(
                Member,
            ),
        ],
        span: Span {
            lo: BytePos(
                270,
            ),
            hi: BytePos(
                280,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Conditional {
        condition: Binary(
            3,
            Unknown(
                None,
                "unsupported expression",
            ),
            StrictEqual,
            Constant(
                Str(
                    Word(
                        Atom('string' type=static),
                    ),
                ),
            ),
        ),
        kind: IfElse {
            then: EffectsBlock {
                effects: [
                    Member {
                        obj: Member(
                            3,
                            FreeVar(
                                Atom('process' type=static),
                            ),
                            Constant(
                                Str(
                                    Word(
                                        Atom('env' type=static),
                                    ),
                                ),
                            ),
                        ),
                        prop: Constant(
                            Str(
                                Word(
                                    Atom('NODE_ENV' type=static),
                                ),
                            ),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Bin,
                            ),
                            BinExpr(
                                Left,
                            ),
                            Expr(
                                Member,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                366,
                            ),
                            hi: BytePos(
                                386,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    Member {
                        obj: FreeVar(
                            Atom('process' type=static),
                        ),
                        prop: Constant(
                            Str(
                                Word(
                                    Atom('env' type=static),
                                ),
                            ),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Bin,
                            ),
                            BinExpr(
                                Left,
                            ),
                            Expr(
                                Member,
                            ),
                            MemberExpr(
                                Obj,
                            ),
                            Expr(
                                Member,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                366,
                            ),
                            hi: BytePos(
                                377,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    FreeVar {
                        var: FreeVar(
                            Atom('process' type=static),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Bin,
                            ),
                            BinExpr(
                                Left,
                            ),
                            Expr(
                                Member,
                            ),
                            MemberExpr(
                                Obj,
                            ),
                            Expr(
                                Member,
                            ),
                            MemberExpr(
                                Obj,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                366,
                            ),
                            hi: BytePos(
                                373,
                            ),
                            ctxt: #1,
                        },
                        in_try: false,
                    },
                    Conditional {
                        condition: Binary(
                            7,
                            Member(
                                5,
                                Member(
                                    3,
                                    FreeVar(
                                        Atom('process' type=static),
                                    ),
                                    Constant(
                                        Str(
                                            Word(
                                                Atom('env' type=static),
                                            ),
                                        ),
                                    ),
                                ),
                                Constant(
                                    Str(
                                        Word(
                                            Atom('NODE_ENV' type=static),
                                        ),
                                    ),
                                ),
                            ),
                            StrictNotEqual,
                            Constant(
                                Str(
                                    Word(
                                        Atom('production' type=dynamic),
                                    ),
                                ),
                            ),
                        ),
                        kind: If {
                            then: EffectsBlock {
                                effects: [
                                    FreeVar {
                                        var: FreeVar(
                                            Atom('phash' type=inline),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Assign,
                                            ),
                                            AssignExpr(
                                                Right,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Callee,
                                            ),
                                            Callee(
                                                Expr,
                                            ),
                                            Expr(
                                                Ident,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                419,
                                            ),
                                            hi: BytePos(
                                                424,
                                            ),
                                            ctxt: #1,
                                        },
                                        in_try: false,
                                    },
                                    Call {
                                        func: FreeVar(
                                            Atom('phash' type=inline),
                                        ),
                                        args: [
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('dynamicHash' type=dynamic),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('partRule' type=dynamic),
                                                        #5,
                                                    ),
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Assign,
                                            ),
                                            AssignExpr(
                                                Right,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                419,
                                            ),
                                            hi: BytePos(
                                                447,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                ],
                                ast_path: [
                                    Program(
                                        Module,
                                    ),
                                    Module(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ModuleItem(
                                        ModuleDecl,
                                    ),
                                    ModuleDecl(
                                        ExportDefaultDecl,
                                    ),
                                    ExportDefaultDecl(
                                        Decl,
                                    ),
                                    DefaultDecl(
                                        Class,
                                    ),
                                    ClassExpr(
                                        Class,
                                    ),
                                    Class(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ClassMember(
                                        Method,
                                    ),
                                    ClassMethod(
                                        Function,
                                    ),
                                    Function(
                                        Body,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            2,
                                        ),
                                    ),
                                    Stmt(
                                        For,
                                    ),
                                    ForStmt(
                                        Body,
                                    ),
                                    Stmt(
                                        Block,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            1,
                                        ),
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Cons,
                                    ),
                                    Stmt(
                                        Block,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            1,
                                        ),
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Cons,
                                    ),
                                ],
                            },
                        },
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                362,
                            ),
                            hi: BytePos(
                                448,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                ],
                ast_path: [
                    Program(
                        Module,
                    ),
                    Module(
                        Body(
                            0,
                        ),
                    ),
                    ModuleItem(
                        ModuleDecl,
                    ),
                    ModuleDecl(
                        ExportDefaultDecl,
                    ),
                    ExportDefaultDecl(
                        Decl,
                    ),
                    DefaultDecl(
                        Class,
                    ),
                    ClassExpr(
                        Class,
                    ),
                    Class(
                        Body(
                            0,
                        ),
                    ),
                    ClassMember(
                        Method,
                    ),
                    ClassMethod(
                        Function,
                    ),
                    Function(
                        Body,
                    ),
                    BlockStmt(
                        Stmts(
                            2,
                        ),
                    ),
                    Stmt(
                        For,
                    ),
                    ForStmt(
                        Body,
                    ),
                    Stmt(
                        Block,
                    ),
                    BlockStmt(
                        Stmts(
                            1,
                        ),
                    ),
                    Stmt(
                        If,
                    ),
                    IfStmt(
                        Cons,
                    ),
                ],
            },
            else: EffectsBlock {
                effects: [
                    Conditional {
                        condition: Variable(
                            (
                                Atom('partRule' type=dynamic),
                                #5,
                            ),
                        ),
                        kind: If {
                            then: EffectsBlock {
                                effects: [
                                    FreeVar {
                                        var: FreeVar(
                                            Atom('joinStringArray' type=dynamic),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Decl,
                                            ),
                                            Decl(
                                                Var,
                                            ),
                                            VarDecl(
                                                Decls(
                                                    0,
                                                ),
                                            ),
                                            VarDeclarator(
                                                Init,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Callee,
                                            ),
                                            Callee(
                                                Expr,
                                            ),
                                            Expr(
                                                Ident,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                505,
                                            ),
                                            hi: BytePos(
                                                520,
                                            ),
                                            ctxt: #1,
                                        },
                                        in_try: false,
                                    },
                                    FreeVar {
                                        var: FreeVar(
                                            Atom('flatten' type=inline),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Decl,
                                            ),
                                            Decl(
                                                Var,
                                            ),
                                            VarDecl(
                                                Decls(
                                                    0,
                                                ),
                                            ),
                                            VarDeclarator(
                                                Init,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    0,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Callee,
                                            ),
                                            Callee(
                                                Expr,
                                            ),
                                            Expr(
                                                Ident,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                532,
                                            ),
                                            hi: BytePos(
                                                539,
                                            ),
                                            ctxt: #1,
                                        },
                                        in_try: false,
                                    },
                                    Call {
                                        func: FreeVar(
                                            Atom('flatten' type=inline),
                                        ),
                                        args: [
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('partRule' type=dynamic),
                                                        #5,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('executionContext' type=dynamic),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('styleSheet' type=dynamic),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('stylis' type=inline),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Decl,
                                            ),
                                            Decl(
                                                Var,
                                            ),
                                            VarDecl(
                                                Decls(
                                                    0,
                                                ),
                                            ),
                                            VarDeclarator(
                                                Init,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    0,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                532,
                                            ),
                                            hi: BytePos(
                                                587,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    Call {
                                        func: FreeVar(
                                            Atom('joinStringArray' type=dynamic),
                                        ),
                                        args: [
                                            Value(
                                                Call(
                                                    6,
                                                    FreeVar(
                                                        Atom('flatten' type=inline),
                                                    ),
                                                    [
                                                        Variable(
                                                            (
                                                                Atom('partRule' type=dynamic),
                                                                #5,
                                                            ),
                                                        ),
                                                        Variable(
                                                            (
                                                                Atom('executionContext' type=dynamic),
                                                                #3,
                                                            ),
                                                        ),
                                                        Variable(
                                                            (
                                                                Atom('styleSheet' type=dynamic),
                                                                #3,
                                                            ),
                                                        ),
                                                        Variable(
                                                            (
                                                                Atom('stylis' type=inline),
                                                                #3,
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Decl,
                                            ),
                                            Decl(
                                                Var,
                                            ),
                                            VarDecl(
                                                Decls(
                                                    0,
                                                ),
                                            ),
                                            VarDeclarator(
                                                Init,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                505,
                                            ),
                                            hi: BytePos(
                                                597,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    FreeVar {
                                        var: FreeVar(
                                            Atom('phash' type=inline),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Assign,
                                            ),
                                            AssignExpr(
                                                Right,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Callee,
                                            ),
                                            Callee(
                                                Expr,
                                            ),
                                            Expr(
                                                Ident,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                621,
                                            ),
                                            hi: BytePos(
                                                626,
                                            ),
                                            ctxt: #1,
                                        },
                                        in_try: false,
                                    },
                                    Call {
                                        func: FreeVar(
                                            Atom('phash' type=inline),
                                        ),
                                        args: [
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('dynamicHash' type=dynamic),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('partString' type=dynamic),
                                                        #7,
                                                    ),
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    2,
                                                ),
                                            ),
                                            Stmt(
                                                For,
                                            ),
                                            ForStmt(
                                                Body,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Alt,
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Assign,
                                            ),
                                            AssignExpr(
                                                Right,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                621,
                                            ),
                                            hi: BytePos(
                                                651,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                ],
                                ast_path: [
                                    Program(
                                        Module,
                                    ),
                                    Module(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ModuleItem(
                                        ModuleDecl,
                                    ),
                                    ModuleDecl(
                                        ExportDefaultDecl,
                                    ),
                                    ExportDefaultDecl(
                                        Decl,
                                    ),
                                    DefaultDecl(
                                        Class,
                                    ),
                                    ClassExpr(
                                        Class,
                                    ),
                                    Class(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ClassMember(
                                        Method,
                                    ),
                                    ClassMethod(
                                        Function,
                                    ),
                                    Function(
                                        Body,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            2,
                                        ),
                                    ),
                                    Stmt(
                                        For,
                                    ),
                                    ForStmt(
                                        Body,
                                    ),
                                    Stmt(
                                        Block,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            1,
                                        ),
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Alt,
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Cons,
                                    ),
                                ],
                            },
                        },
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                For,
                            ),
                            ForStmt(
                                Body,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Alt,
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                462,
                            ),
                            hi: BytePos(
                                687,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                ],
                ast_path: [
                    Program(
                        Module,
                    ),
                    Module(
                        Body(
                            0,
                        ),
                    ),
                    ModuleItem(
                        ModuleDecl,
                    ),
                    ModuleDecl(
                        ExportDefaultDecl,
                    ),
                    ExportDefaultDecl(
                        Decl,
                    ),
                    DefaultDecl(
                        Class,
                    ),
                    ClassExpr(
                        Class,
                    ),
                    Class(
                        Body(
                            0,
                        ),
                    ),
                    ClassMember(
                        Method,
                    ),
                    ClassMethod(
                        Function,
                    ),
                    Function(
                        Body,
                    ),
                    BlockStmt(
                        Stmts(
                            2,
                        ),
                    ),
                    Stmt(
                        For,
                    ),
                    ForStmt(
                        Body,
                    ),
                    Stmt(
                        Block,
                    ),
                    BlockStmt(
                        Stmts(
                            1,
                        ),
                    ),
                    Stmt(
                        If,
                    ),
                    IfStmt(
                        Alt,
                    ),
                ],
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    2,
                ),
            ),
            Stmt(
                For,
            ),
            ForStmt(
                Body,
            ),
            Stmt(
                Block,
            ),
            BlockStmt(
                Stmts(
                    1,
                ),
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: Span {
            lo: BytePos(
                292,
            ),
            hi: BytePos(
                687,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
    Conditional {
        condition: Variable(
            (
                Atom('css' type=inline),
                #3,
            ),
        ),
        kind: If {
            then: EffectsBlock {
                effects: [
                    FreeVar {
                        var: FreeVar(
                            Atom('generateName' type=dynamic),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Var,
                            ),
                            VarDecl(
                                Decls(
                                    0,
                                ),
                            ),
                            VarDeclarator(
                                Init,
                            ),
                            Expr(
                                Call,
                            ),
                            CallExpr(
                                Callee,
                            ),
                            Callee(
                                Expr,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                729,
                            ),
                            hi: BytePos(
                                741,
                            ),
                            ctxt: #1,
                        },
                        in_try: false,
                    },
                    Call {
                        func: FreeVar(
                            Atom('generateName' type=dynamic),
                        ),
                        args: [
                            Value(
                                Unknown(
                                    None,
                                    "unsupported expression",
                                ),
                            ),
                        ],
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    0,
                                ),
                            ),
                            Stmt(
                                Decl,
                            ),
                            Decl(
                                Var,
                            ),
                            VarDecl(
                                Decls(
                                    0,
                                ),
                            ),
                            VarDeclarator(
                                Init,
                            ),
                            Expr(
                                Call,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                729,
                            ),
                            hi: BytePos(
                                760,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    Member {
                        obj: Variable(
                            (
                                Atom('styleSheet' type=dynamic),
                                #3,
                            ),
                        ),
                        prop: Constant(
                            Str(
                                Word(
                                    Atom('hasNameForId' type=dynamic),
                                ),
                            ),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Unary,
                            ),
                            UnaryExpr(
                                Arg,
                            ),
                            Expr(
                                Call,
                            ),
                            CallExpr(
                                Callee,
                            ),
                            Callee(
                                Expr,
                            ),
                            Expr(
                                Member,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                774,
                            ),
                            hi: BytePos(
                                797,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    Member {
                        obj: Unknown(
                            None,
                            "unsupported expression",
                        ),
                        prop: Constant(
                            Str(
                                Word(
                                    Atom('componentId' type=dynamic),
                                ),
                            ),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Unary,
                            ),
                            UnaryExpr(
                                Arg,
                            ),
                            Expr(
                                Call,
                            ),
                            CallExpr(
                                Args(
                                    0,
                                ),
                            ),
                            ExprOrSpread(
                                Expr,
                            ),
                            Expr(
                                Member,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                798,
                            ),
                            hi: BytePos(
                                814,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    MemberCall {
                        obj: Variable(
                            (
                                Atom('styleSheet' type=dynamic),
                                #3,
                            ),
                        ),
                        prop: Constant(
                            Str(
                                Word(
                                    Atom('hasNameForId' type=dynamic),
                                ),
                            ),
                        ),
                        args: [
                            Value(
                                Member(
                                    3,
                                    Unknown(
                                        None,
                                        "unsupported expression",
                                    ),
                                    Constant(
                                        Str(
                                            Word(
                                                Atom('componentId' type=dynamic),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                            Value(
                                Variable(
                                    (
                                        Atom('name' type=static),
                                        #8,
                                    ),
                                ),
                            ),
                        ],
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                            Expr(
                                Unary,
                            ),
                            UnaryExpr(
                                Arg,
                            ),
                            Expr(
                                Call,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                774,
                            ),
                            hi: BytePos(
                                821,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    Conditional {
                        condition: Not(
                            8,
                            MemberCall(
                                7,
                                Variable(
                                    (
                                        Atom('styleSheet' type=dynamic),
                                        #3,
                                    ),
                                ),
                                Constant(
                                    Str(
                                        Word(
                                            Atom('hasNameForId' type=dynamic),
                                        ),
                                    ),
                                ),
                                [
                                    Member(
                                        3,
                                        Unknown(
                                            None,
                                            "unsupported expression",
                                        ),
                                        Constant(
                                            Str(
                                                Word(
                                                    Atom('componentId' type=dynamic),
                                                ),
                                            ),
                                        ),
                                    ),
                                    Variable(
                                        (
                                            Atom('name' type=static),
                                            #8,
                                        ),
                                    ),
                                ],
                            ),
                        ),
                        kind: If {
                            then: EffectsBlock {
                                effects: [
                                    Member {
                                        obj: Variable(
                                            (
                                                Atom('styleSheet' type=dynamic),
                                                #3,
                                            ),
                                        ),
                                        prop: Constant(
                                            Str(
                                                Word(
                                                    Atom('insertRules' type=dynamic),
                                                ),
                                            ),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Callee,
                                            ),
                                            Callee(
                                                Expr,
                                            ),
                                            Expr(
                                                Member,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                833,
                                            ),
                                            hi: BytePos(
                                                855,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    Member {
                                        obj: Unknown(
                                            None,
                                            "unsupported expression",
                                        ),
                                        prop: Constant(
                                            Str(
                                                Word(
                                                    Atom('componentId' type=dynamic),
                                                ),
                                            ),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    0,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Member,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                867,
                                            ),
                                            hi: BytePos(
                                                883,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    FreeVar {
                                        var: FreeVar(
                                            Atom('undefined' type=static),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    2,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    2,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Ident,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                935,
                                            ),
                                            hi: BytePos(
                                                944,
                                            ),
                                            ctxt: #1,
                                        },
                                        in_try: false,
                                    },
                                    Member {
                                        obj: Unknown(
                                            None,
                                            "unsupported expression",
                                        ),
                                        prop: Constant(
                                            Str(
                                                Word(
                                                    Atom('componentId' type=dynamic),
                                                ),
                                            ),
                                        ),
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    2,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    3,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Member,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                946,
                                            ),
                                            hi: BytePos(
                                                962,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    Call {
                                        func: Variable(
                                            (
                                                Atom('stylis' type=inline),
                                                #3,
                                            ),
                                        ),
                                        args: [
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('css' type=inline),
                                                        #3,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Concat(
                                                    3,
                                                    [
                                                        Constant(
                                                            Str(
                                                                Atom(
                                                                    ".",
                                                                ),
                                                            ),
                                                        ),
                                                        Variable(
                                                            (
                                                                Atom('name' type=static),
                                                                #8,
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                            Value(
                                                FreeVar(
                                                    Atom('undefined' type=static),
                                                ),
                                            ),
                                            Value(
                                                Member(
                                                    3,
                                                    Unknown(
                                                        None,
                                                        "unsupported expression",
                                                    ),
                                                    Constant(
                                                        Str(
                                                            Word(
                                                                Atom('componentId' type=dynamic),
                                                            ),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                            CallExpr(
                                                Args(
                                                    2,
                                                ),
                                            ),
                                            ExprOrSpread(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                911,
                                            ),
                                            hi: BytePos(
                                                963,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                    MemberCall {
                                        obj: Variable(
                                            (
                                                Atom('styleSheet' type=dynamic),
                                                #3,
                                            ),
                                        ),
                                        prop: Constant(
                                            Str(
                                                Word(
                                                    Atom('insertRules' type=dynamic),
                                                ),
                                            ),
                                        ),
                                        args: [
                                            Value(
                                                Member(
                                                    3,
                                                    Unknown(
                                                        None,
                                                        "unsupported expression",
                                                    ),
                                                    Constant(
                                                        Str(
                                                            Word(
                                                                Atom('componentId' type=dynamic),
                                                            ),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Variable(
                                                    (
                                                        Atom('name' type=static),
                                                        #8,
                                                    ),
                                                ),
                                            ),
                                            Value(
                                                Call(
                                                    10,
                                                    Variable(
                                                        (
                                                            Atom('stylis' type=inline),
                                                            #3,
                                                        ),
                                                    ),
                                                    [
                                                        Variable(
                                                            (
                                                                Atom('css' type=inline),
                                                                #3,
                                                            ),
                                                        ),
                                                        Concat(
                                                            3,
                                                            [
                                                                Constant(
                                                                    Str(
                                                                        Atom(
                                                                            ".",
                                                                        ),
                                                                    ),
                                                                ),
                                                                Variable(
                                                                    (
                                                                        Atom('name' type=static),
                                                                        #8,
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                        FreeVar(
                                                            Atom('undefined' type=static),
                                                        ),
                                                        Member(
                                                            3,
                                                            Unknown(
                                                                None,
                                                                "unsupported expression",
                                                            ),
                                                            Constant(
                                                                Str(
                                                                    Word(
                                                                        Atom('componentId' type=dynamic),
                                                                    ),
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                        ],
                                        ast_path: [
                                            Program(
                                                Module,
                                            ),
                                            Module(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ModuleItem(
                                                ModuleDecl,
                                            ),
                                            ModuleDecl(
                                                ExportDefaultDecl,
                                            ),
                                            ExportDefaultDecl(
                                                Decl,
                                            ),
                                            DefaultDecl(
                                                Class,
                                            ),
                                            ClassExpr(
                                                Class,
                                            ),
                                            Class(
                                                Body(
                                                    0,
                                                ),
                                            ),
                                            ClassMember(
                                                Method,
                                            ),
                                            ClassMethod(
                                                Function,
                                            ),
                                            Function(
                                                Body,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    3,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    1,
                                                ),
                                            ),
                                            Stmt(
                                                If,
                                            ),
                                            IfStmt(
                                                Cons,
                                            ),
                                            Stmt(
                                                Block,
                                            ),
                                            BlockStmt(
                                                Stmts(
                                                    0,
                                                ),
                                            ),
                                            Stmt(
                                                Expr,
                                            ),
                                            ExprStmt(
                                                Expr,
                                            ),
                                            Expr(
                                                Call,
                                            ),
                                        ],
                                        span: Span {
                                            lo: BytePos(
                                                833,
                                            ),
                                            hi: BytePos(
                                                973,
                                            ),
                                            ctxt: #0,
                                        },
                                        in_try: false,
                                    },
                                ],
                                ast_path: [
                                    Program(
                                        Module,
                                    ),
                                    Module(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ModuleItem(
                                        ModuleDecl,
                                    ),
                                    ModuleDecl(
                                        ExportDefaultDecl,
                                    ),
                                    ExportDefaultDecl(
                                        Decl,
                                    ),
                                    DefaultDecl(
                                        Class,
                                    ),
                                    ClassExpr(
                                        Class,
                                    ),
                                    Class(
                                        Body(
                                            0,
                                        ),
                                    ),
                                    ClassMember(
                                        Method,
                                    ),
                                    ClassMethod(
                                        Function,
                                    ),
                                    Function(
                                        Body,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            3,
                                        ),
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Cons,
                                    ),
                                    Stmt(
                                        Block,
                                    ),
                                    BlockStmt(
                                        Stmts(
                                            1,
                                        ),
                                    ),
                                    Stmt(
                                        If,
                                    ),
                                    IfStmt(
                                        Cons,
                                    ),
                                ],
                            },
                        },
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    1,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Test,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                769,
                            ),
                            hi: BytePos(
                                982,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                    FreeVar {
                        var: FreeVar(
                            Atom('names' type=inline),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Left,
                            ),
                            PatOrExpr(
                                Pat,
                            ),
                            Pat(
                                Ident,
                            ),
                            BindingIdent(
                                Id,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                990,
                            ),
                            hi: BytePos(
                                995,
                            ),
                            ctxt: #1,
                        },
                        in_try: false,
                    },
                    FreeVar {
                        var: FreeVar(
                            Atom('joinStrings' type=dynamic),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Right,
                            ),
                            Expr(
                                Call,
                            ),
                            CallExpr(
                                Callee,
                            ),
                            Callee(
                                Expr,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                998,
                            ),
                            hi: BytePos(
                                1009,
                            ),
                            ctxt: #1,
                        },
                        in_try: false,
                    },
                    FreeVar {
                        var: FreeVar(
                            Atom('names' type=inline),
                        ),
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Right,
                            ),
                            Expr(
                                Call,
                            ),
                            CallExpr(
                                Args(
                                    0,
                                ),
                            ),
                            ExprOrSpread(
                                Expr,
                            ),
                            Expr(
                                Ident,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                1010,
                            ),
                            hi: BytePos(
                                1015,
                            ),
                            ctxt: #1,
                        },
                        in_try: false,
                    },
                    Call {
                        func: FreeVar(
                            Atom('joinStrings' type=dynamic),
                        ),
                        args: [
                            Value(
                                FreeVar(
                                    Atom('names' type=inline),
                                ),
                            ),
                            Value(
                                Variable(
                                    (
                                        Atom('name' type=static),
                                        #8,
                                    ),
                                ),
                            ),
                        ],
                        ast_path: [
                            Program(
                                Module,
                            ),
                            Module(
                                Body(
                                    0,
                                ),
                            ),
                            ModuleItem(
                                ModuleDecl,
                            ),
                            ModuleDecl(
                                ExportDefaultDecl,
                            ),
                            ExportDefaultDecl(
                                Decl,
                            ),
                            DefaultDecl(
                                Class,
                            ),
                            ClassExpr(
                                Class,
                            ),
                            Class(
                                Body(
                                    0,
                                ),
                            ),
                            ClassMember(
                                Method,
                            ),
                            ClassMethod(
                                Function,
                            ),
                            Function(
                                Body,
                            ),
                            BlockStmt(
                                Stmts(
                                    3,
                                ),
                            ),
                            Stmt(
                                If,
                            ),
                            IfStmt(
                                Cons,
                            ),
                            Stmt(
                                Block,
                            ),
                            BlockStmt(
                                Stmts(
                                    2,
                                ),
                            ),
                            Stmt(
                                Expr,
                            ),
                            ExprStmt(
                                Expr,
                            ),
                            Expr(
                                Assign,
                            ),
                            AssignExpr(
                                Right,
                            ),
                            Expr(
                                Call,
                            ),
                        ],
                        span: Span {
                            lo: BytePos(
                                998,
                            ),
                            hi: BytePos(
                                1022,
                            ),
                            ctxt: #0,
                        },
                        in_try: false,
                    },
                ],
                ast_path: [
                    Program(
                        Module,
                    ),
                    Module(
                        Body(
                            0,
                        ),
                    ),
                    ModuleItem(
                        ModuleDecl,
                    ),
                    ModuleDecl(
                        ExportDefaultDecl,
                    ),
                    ExportDefaultDecl(
                        Decl,
                    ),
                    DefaultDecl(
                        Class,
                    ),
                    ClassExpr(
                        Class,
                    ),
                    Class(
                        Body(
                            0,
                        ),
                    ),
                    ClassMember(
                        Method,
                    ),
                    ClassMethod(
                        Function,
                    ),
                    Function(
                        Body,
                    ),
                    BlockStmt(
                        Stmts(
                            3,
                        ),
                    ),
                    Stmt(
                        If,
                    ),
                    IfStmt(
                        Cons,
                    ),
                ],
            },
        },
        ast_path: [
            Program(
                Module,
            ),
            Module(
                Body(
                    0,
                ),
            ),
            ModuleItem(
                ModuleDecl,
            ),
            ModuleDecl(
                ExportDefaultDecl,
            ),
            ExportDefaultDecl(
                Decl,
            ),
            DefaultDecl(
                Class,
            ),
            ClassExpr(
                Class,
            ),
            Class(
                Body(
                    0,
                ),
            ),
            ClassMember(
                Method,
            ),
            ClassMethod(
                Function,
            ),
            Function(
                Body,
            ),
            BlockStmt(
                Stmts(
                    3,
                ),
            ),
            Stmt(
                If,
            ),
            IfStmt(
                Test,
            ),
        ],
        span: Span {
            lo: BytePos(
                699,
            ),
            hi: BytePos(
                1029,
            ),
            ctxt: #0,
        },
        in_try: false,
    },
]
